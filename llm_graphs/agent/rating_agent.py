"""
Iteratively generate and rate knowledge graphs for a given book.
"""
from __future__ import annotations

from typing import (
    Any,
    List,
    Literal,
    Optional,
    TypedDict,
)

import instructor
from openai import OpenAI

from llm_graphs.models import (
    Feedback,
    KnowledgeGraph,
)
from llm_graphs.utils import draw_with_pyvis

GraphDict = TypedDict('GraphDict', {'graph': KnowledgeGraph, 'rating': Optional[Feedback]})

GPT_4O = 'gpt-4o'
GPT_3_5_TURBO = 'gpt-3.5-turbo'
GPT_4 = 'gpt-4'
Model = Literal['gpt-4o', 'gpt-3.5-turbo', 'gpt-4']


class RatingGraphCreator:
    """
    Class to iteratively generate and rate knowledge graphs for a given book.
    """
    meaning_str = '''- the resulting graph will be visually appealing and give a good global understanding of the structure of the book it explains.
    - The graph will focus on the concepts and relation between the characters and/or the concepts in the book, not tell the story of the book
    - Every link description should be of the form close to "<link_description> represent  <reason>" you are allowed not to follow exactly this pattern though
    '''

    @property
    def goal_str(self) -> str:
        return (
            f'''Generate a graph that will help the reader to understand the structure of the book {self.book_name}'''
        )

    def __init__(self, book_name: str) -> None:
        """Initializes a new instance of the `GraphPlotter` class.

        Parameters
        ----------
            book_name (str): The name of the book.

        Returns
        -------
            None
        """
        self._client = instructor.from_openai(OpenAI())
        self._graphs_history: List[GraphDict] = []
        self.book_name: str = book_name

    @property
    def most_recent_graph(self) -> KnowledgeGraph:
        """Returns the most recent graph generated by the user.

        Returns
        -------
            KnowledgeGraph: The most recent graph.
        """
        return self._graphs_history[-1]['graph']

    def generate_initial_graph(self, model: Model = GPT_4O) -> None:  # type: ignore
        knowledge_graph = self._client.chat.completions.create(
            model=model,  # type: ignore
            response_model=KnowledgeGraph,
            messages=[
                {
                    'role': 'system',
                    'content': 'You are an expert in summarizing data into visually appealing knowledge graphs.',
                },
                {
                    'role': 'user',
                    'content': f'''

    # Goal
    {self.goal_str}
    # Graph meaning
    {self.meaning_str}
    # Graph structure
    for the edges:
    - idFrom and idTo are the ids of the nodes from where the link srtarts and where the link is directged
    - Each node represent a concept in the book
    - If the graph is too complex to be represented in 2d you are allowed to remove some edge and nodes
    - If you have a link between two node ids that do not exist you have failed your task
    - If there is an isolated node you have failed your task
    - The graph should not have isolated component
    - A node should not have self loop and there should not be a loop between two nodes
    - The graph should ideally have 10 nodes and 20 edges but be flexible
    -
    Take some time and reason step by step before creating the graph object to make a graph that will be easy to display
    You should describe your thought process in the reasoning field of the graph
    Take a deep breath and work through this step by step and make sure you have the right answer
    ''',
                },
            ],
        )
        self._graphs_history.append({'graph': knowledge_graph, 'rating': None})

    def rate_graph(self, knowledge_graph: KnowledgeGraph, model: Model = 'gpt-3.5-turbo') -> Feedback:
        feedback = self._client.chat.completions.create(
            model=model,
            response_model=Feedback,
            messages=[
                {
                    'role': 'system',
                    'content': 'You are a book reader who want to use visual insights to understand stories without being revealed the end of the story',
                },
                {
                    'role': 'user',
                    'content': f'''
            Graph json
            {knowledge_graph.model_dump_json()}

            The json above represent a graph that was generated and is supposed to follow the criteria below
            <criteria>
            # Goal
            {self.goal_str}
            # Graph meaning
            {self.meaning_str}
            </criteria>
            Please rate the graph above from 0 to 10 and give a feedback on how it can be improved
            You should give extra mark to graph that explain the concepts of the book and help the reader interprete the book as they are reading it
            You should penalize graphs with loops between two nodes and give extra marks to graph with non standard structure
            ''',
                },
            ],
        )
        return feedback

    def rate_last_graph(self, model: Model = GPT_3_5_TURBO) -> None:  # type: ignore
        rating = self.rate_graph(self._graphs_history[-1]['graph'], model=model)
        self._graphs_history[-1]['rating'] = rating

    def new_graph_from_feedback(self, model: Model = GPT_4O) -> KnowledgeGraph:  # type: ignore
        last_knowledge_graph: KnowledgeGraph = self._graphs_history[-1]['graph']
        if not self._graphs_history:
            raise ValueError('You need to generate a first graph with `generate_initial_graph`')
        last_feedback: Optional[Feedback] = self._graphs_history[-1]['rating']
        if not last_feedback:
            raise ValueError('You need to rate the last graph before generating a new one')
        new_knowledge_graph = self._client.chat.completions.create(
            model=model,
            response_model=KnowledgeGraph,
            messages=[
                {
                    'role': 'system',
                    'content': 'You are an expert in summarizing data into visually appealing knowledge graphs.',
                },
                {
                    'role': 'user',
                    'content': f'''
            You made the graph below
            ```
            {last_knowledge_graph.model_dump_json()}
            ```
            Following those instructions
            # Goal
            {self.goal_str}
            # Graph meaning
            {self.meaning_str}
            And received the following rating {last_feedback.rating}/ 10 and this feedback {last_feedback.opinion}. Improve the graph
            ''',
                },
            ],
        )
        self._graphs_history.append({'graph': new_knowledge_graph, 'rating': None})
        return new_knowledge_graph

    def rate_and_generate(
        self,
        model_rating: Model = GPT_3_5_TURBO,  # type: ignore
        model_generation: Model = GPT_4O,
    ) -> KnowledgeGraph:
        self.rate_last_graph(model_rating)
        self.new_graph_from_feedback(model_generation)
        return self.most_recent_graph

    def plot(self, ix: int = -1) -> Any:
        last_knowledge_graph: KnowledgeGraph = self._graphs_history[ix]['graph']
        return draw_with_pyvis(last_knowledge_graph)
