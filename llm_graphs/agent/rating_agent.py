"""
Module to iteratively generate and rate knowledge graphs for a given book.
"""
from __future__ import annotations

from typing import Any, List, Literal, Optional, TypedDict

import instructor
from openai import OpenAI

from llm_graphs.models import Feedback, KnowledgeGraph
from llm_graphs.utils import draw_with_pyvis
from llm_graphs.agent.utils import (
    generate_system_message,
    generate_user_message,
    generate_feedback_message,
    generate_improvement_message,
)

GraphDict = TypedDict('GraphDict', {'graph': KnowledgeGraph, 'rating': Optional[Feedback]})

GPT_4O = 'gpt-4o'
GPT_3_5_TURBO = 'gpt-3.5-turbo'
GPT_4 = 'gpt-4'
Model = Literal['gpt-4o', 'gpt-3.5-turbo', 'gpt-4']


class RatingGraphCreator:
    """Class to iteratively generate and rate knowledge graphs for a given book."""
    
    MEANING_STR = (
        "- the resulting graph will be visually appealing and give a good global understanding of the structure of the book it explains.\n"
        "- The graph will focus on the concepts and relation between the characters and/or the concepts in the book, not tell the story of the book\n"
        '- Every link description should be of the form close to "<link_description> represent  <reason>" you are allowed not to follow exactly this pattern though\n'
    )

    @property
    def goal_str(self) -> str:
        return f"Generate a graph that will help the reader to understand the structure of the book {self.book_name}"

    def __init__(self, book_name: str) -> None:
        """Initializes a new instance of the `RatingGraphCreator` class.

        Parameters
        ----------
            book_name (str): The name of the book.

        Returns
        -------
            None
        """
        self._client = instructor.from_openai(OpenAI())
        self._graphs_history: List[GraphDict] = []
        self.book_name: str = book_name

    @property
    def most_recent_graph(self) -> KnowledgeGraph:
        """
        Returns the most recent graph generated by the user.

        Returns
        -------
        KnowledgeGraph
            The most recent graph.
        """
        return self._graphs_history[-1]['graph']

    def generate_initial_graph(self, model: Model = GPT_4O) -> None:
        try:
            knowledge_graph = self._client.chat.completions.create(
            model=model,  # type: ignore
            response_model=KnowledgeGraph,
            messages=[generate_system_message(), generate_user_message(self.goal_str, self.MEANING_STR)],
        )
            self._graphs_history.append({'graph': knowledge_graph, 'rating': None})
        except Exception as e:
            raise RuntimeError(f"Failed to generate initial graph: {e}")

    def rate_graph(self, knowledge_graph: KnowledgeGraph, model: Model = GPT_3_5_TURBO) -> Feedback:
        try:
            feedback = self._client.chat.completions.create(
            model=model,
            response_model=Feedback,
            messages=[generate_system_message(), generate_feedback_message(self.goal_str, self.MEANING_STR, knowledge_graph)],
        )
            return feedback
        except Exception as e:
            raise RuntimeError(f"Failed to rate graph: {e}")

    def rate_last_graph(self, model: Model = GPT_3_5_TURBO) -> None:
        rating = self.rate_graph(self._graphs_history[-1]['graph'], model=model)
        self._graphs_history[-1]['rating'] = rating

    def new_graph_from_feedback(self, model: Model = GPT_4O) -> KnowledgeGraph:
        if not self._graphs_history:
            raise ValueError('You need to generate a first graph with `generate_initial_graph`')
        
        last_knowledge_graph: KnowledgeGraph = self._graphs_history[-1]['graph']
        if not self._graphs_history:
            raise ValueError('You need to generate a first graph with `generate_initial_graph`')
        last_feedback: Optional[Feedback] = self._graphs_history[-1]['rating']
        if not last_feedback:
            raise ValueError('You need to rate the last graph before generating a new one')
        try:
            new_knowledge_graph = self._client.chat.completions.create(
            model=model,
            response_model=KnowledgeGraph,
            messages=[generate_system_message(), generate_improvement_message(self.goal_str, self.MEANING_STR, last_knowledge_graph, last_feedback)],
        )
            self._graphs_history.append({'graph': new_knowledge_graph, 'rating': None})
        except Exception as e:
            raise RuntimeError(f"Failed to generate new graph from feedback: {e}")
        return new_knowledge_graph

    def rate_and_generate(self, model_rating: Model = GPT_3_5_TURBO, model_generation: Model = GPT_4O) -> KnowledgeGraph:
        self.rate_last_graph(model_rating)
        self.new_graph_from_feedback(model_generation)
        return self.most_recent_graph

    def plot(self, ix: int = -1) -> Any:
        """Plots the knowledge graph at the given index.

        Parameters
        ----------
        ix : int, optional
            The index of the graph to plot, by default -1 (most recent graph).

        Returns
        -------
        Any
            The plotted graph.
        """
        last_knowledge_graph: KnowledgeGraph = self._graphs_history[ix]['graph']
        return draw_with_pyvis(last_knowledge_graph)
